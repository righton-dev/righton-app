type Game {
	id: ID!
	title: String!
	description: String
	cluster: String
	domain: String
	grade: String
	standard: String
	updatedAt: AWSDateTime
	createdAt: AWSDateTime
	questions: [Question]
}

type GameSession {
	gameSessionID: ID!
	gameId: ID!
	teamIds: [Int]!
	startedDateTimeUTC: AWSDateTime
	gameCode: Int!
	multiDeviceMode: Boolean!
	votingTime: Int
	hintsRevealTime: Int
	state: GameSessionState!
	random: AWSJSON
}

type GameSessionConfig {
	configVersion: Int!
	pointsForMostPopularTrickAnswer: Int!
	pointsPerCorrectAnswer: Int!
	votingTime: Int!
	hintsRevealTime: Int!
}

input GameSessionInput {
	gameId: ID!
	teamIds: [Int]
	startedDateTimeUTC: AWSDateTime
	gameCode: Int
	multiDeviceMode: Boolean!
	votingTime: Int
	hintsRevealTime: Int
	state: GameSessionState!
}

enum GameSessionState {
	NotStarted
	InitialIntro
	ChoosingTrickAnswer
	Voting
	ReviewingResult
	Finished
}

type Mutation {
	saveGameSession(gameSession: GameSessionInput): GameSession
	joinGameSession(gameCode: Int!): GameSession!
	joinGame(gameCode: Int!): GameSession
	updateGame(gameId: ID!): Game!
	deleteGame(gameId: ID!): Game!
}

type Query {
	listGames: [Game]
	listQuestions: [Question]
	getGame(gameId: ID): Game!
	getGameSessionConfig: GameSessionConfig
}

type Question {
	id: ID!
	text: String!
	answer: String!
	imageURL: String
	instructions: AWSJSON
	updatedAt: AWSDateTime
	createdAt: AWSDateTime
}

schema {
	query: Query
	mutation: Mutation
}
